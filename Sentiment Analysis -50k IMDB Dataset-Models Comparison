{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":320111,"sourceType":"datasetVersion","datasetId":134715},{"sourceId":8527913,"sourceType":"datasetVersion","datasetId":5007300},{"sourceId":8531014,"sourceType":"datasetVersion","datasetId":5095060},{"sourceId":180048340,"sourceType":"kernelVersion"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-27T17:04:41.973435Z","iopub.execute_input":"2024-05-27T17:04:41.973914Z","iopub.status.idle":"2024-05-27T17:04:41.988193Z","shell.execute_reply.started":"2024-05-27T17:04:41.973870Z","shell.execute_reply":"2024-05-27T17:04:41.987004Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"/kaggle/input/imdb-dataset-of-50k-movie-reviews/IMDB Dataset.csv\n/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_2_embeddings (MiniLM).npy\n/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_2_embeddings_multi-qa-mpnet-base-dot-v1.npy\n/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_1_embeddings_roberta_large.npy\n/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_1_embeddings(Bert-Base).npy\n/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_2_embeddings(Bert-base).npy\n/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_1_embeddings(MiniLM).npy\n/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_1_embeddings_multi-qa-mpnet-base-dot-v1.npy\n/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_2_embeddings_roberta_large.npy\n/kaggle/input/transformers-training/bert_base_nli_mean_tokens.h5\n/kaggle/input/transformers-training/roberta-large-nli-stsb-mean-tokens.h5\n/kaggle/input/transformers-training/__results__.html\n/kaggle/input/transformers-training/multi-qa-mpnet-base-dot-v1.h5\n/kaggle/input/transformers-training/model_miniLM.h5\n/kaggle/input/transformers-training/__notebook__.ipynb\n/kaggle/input/transformers-training/__output__.json\n/kaggle/input/transformers-training/custom.css\n/kaggle/input/models/bert_base_nli_mean_tokens.h5\n/kaggle/input/models/roberta-large-nli-stsb-mean-tokens.h5\n/kaggle/input/models/multi-qa-mpnet-base-dot-v1.h5\n/kaggle/input/models/model_miniLM.h5\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Exploratory Data Analysis","metadata":{}},{"cell_type":"markdown","source":" This is a dataset for binary sentiment classification task containing **50000** data points. I divided it into two sets: 25000 each for training and testing. It has 2 columns `review` and `sentiment`. The `review` column has textual data of variable lengths and `sentiment` column contains two values: `positive` and `neagtive`.","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/imdb-dataset-of-50k-movie-reviews/IMDB Dataset.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:41.990164Z","iopub.execute_input":"2024-05-27T17:04:41.990578Z","iopub.status.idle":"2024-05-27T17:04:42.693037Z","shell.execute_reply.started":"2024-05-27T17:04:41.990542Z","shell.execute_reply":"2024-05-27T17:04:42.692045Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:42.694784Z","iopub.execute_input":"2024-05-27T17:04:42.695173Z","iopub.status.idle":"2024-05-27T17:04:42.714074Z","shell.execute_reply.started":"2024-05-27T17:04:42.695142Z","shell.execute_reply":"2024-05-27T17:04:42.713062Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 50000 entries, 0 to 49999\nData columns (total 2 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   review     50000 non-null  object\n 1   sentiment  50000 non-null  object\ndtypes: object(2)\nmemory usage: 781.4+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:42.715323Z","iopub.execute_input":"2024-05-27T17:04:42.715703Z","iopub.status.idle":"2024-05-27T17:04:42.731678Z","shell.execute_reply.started":"2024-05-27T17:04:42.715666Z","shell.execute_reply":"2024-05-27T17:04:42.730515Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"                                              review sentiment\n0  One of the other reviewers has mentioned that ...  positive\n1  A wonderful little production. <br /><br />The...  positive\n2  I thought this was a wonderful way to spend ti...  positive\n3  Basically there's a family where a little boy ...  negative\n4  Petter Mattei's \"Love in the Time of Money\" is...  positive","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>review</th>\n      <th>sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>One of the other reviewers has mentioned that ...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A wonderful little production. &lt;br /&gt;&lt;br /&gt;The...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>I thought this was a wonderful way to spend ti...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Basically there's a family where a little boy ...</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Petter Mattei's \"Love in the Time of Money\" is...</td>\n      <td>positive</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:42.734070Z","iopub.execute_input":"2024-05-27T17:04:42.734545Z","iopub.status.idle":"2024-05-27T17:04:42.753322Z","shell.execute_reply.started":"2024-05-27T17:04:42.734509Z","shell.execute_reply":"2024-05-27T17:04:42.752196Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"review       0\nsentiment    0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## Distribution of Sentimnets\n\nAs this dataset has equal number of positive and negative reviw so this is a balanced dataset.","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Count plot for sentiment distribution\nsns.countplot(x='sentiment', data=df)\nplt.title('Sentiment Distribution')\nplt.xlabel('Sentiment')\nplt.ylabel('Count')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:42.754464Z","iopub.execute_input":"2024-05-27T17:04:42.754818Z","iopub.status.idle":"2024-05-27T17:04:43.150821Z","shell.execute_reply.started":"2024-05-27T17:04:42.754783Z","shell.execute_reply":"2024-05-27T17:04:43.149813Z"},"trusted":true},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Review Lengths By Sentiment\n\nTo analyze the length of reviews, a histogram can show the distribution of  review lengths.","metadata":{}},{"cell_type":"code","source":"# Calculate review lengths\ndf['review_length'] = df['review'].apply(lambda x : len(x.split()))\n\n# Histogram for review lengths\nplt.hist(df['review_length'], bins=50, color='skyblue', edgecolor='black')\nplt.title('Distribution of Review Lengths (Words)')\nplt.xlabel('Review Length (Words)')\nplt.ylabel('Frequency')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:43.152222Z","iopub.execute_input":"2024-05-27T17:04:43.152640Z","iopub.status.idle":"2024-05-27T17:04:44.147365Z","shell.execute_reply.started":"2024-05-27T17:04:43.152593Z","shell.execute_reply":"2024-05-27T17:04:44.146299Z"},"trusted":true},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Label Encoding of Sentiment Column","metadata":{}},{"cell_type":"markdown","source":"The label column, `sentiment,` has either `positive` or `negative` values, so it needs to be converted into numerical form. Therefore, I opted for the label encoder method, which encodes the `positive` as `1` and `negative` as `0`.","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n# Initialize the label label encoder\nlabel_encoder = LabelEncoder()\n# Label encoding of sentiment column\ndf['encoded_sentiment'] = label_encoder.fit_transform(df['sentiment'])\n\ny = df['encoded_sentiment']","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:44.148995Z","iopub.execute_input":"2024-05-27T17:04:44.149897Z","iopub.status.idle":"2024-05-27T17:04:44.166170Z","shell.execute_reply.started":"2024-05-27T17:04:44.149841Z","shell.execute_reply":"2024-05-27T17:04:44.165054Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"## Text Cleaning\n\nThe review column has raw textual data with punctuation marks, unnecessary characters, URLs etc. Cleaning the data helps in reducing noise in the data which can improve the performance of text-analysis tasks like sentiment Analysis. I imported the `re` method for this purpose","metadata":{}},{"cell_type":"code","source":"import re\n\ndef remove_special_characters(text):\n    # Remove special characters except whitespace and alphanumeric characters\n    text = re.sub(r'[^\\w\\s]', ' ', text)\n    # Replace multiple whitespace characters with a single space\n    text = re.sub(r'\\s+', ' ', text).strip() \n    # Remove URLs\n    text = re.sub(r'http\\S+', '', text)\n    # Remove digits\n    text = re.sub(r'\\d', ' ', text) \n    # Remove the word 'br' (commonly found in HTML text, e.g., <br />)\n    text = re.sub(r'\\bbr\\b', ' ', text)\n    # List of common words to remove\n    common_words = ['film', 'movie']\n    # Construct a regular expression pattern to match any of the common words as whole words\n    pattern = r'\\b(?:' + '|'.join(map(re.escape, common_words)) + r')\\b'\n    # Remove common words from the text\n    text = re.sub(pattern, ' ', text)\n    return text\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:44.167470Z","iopub.execute_input":"2024-05-27T17:04:44.167979Z","iopub.status.idle":"2024-05-27T17:04:44.176997Z","shell.execute_reply.started":"2024-05-27T17:04:44.167945Z","shell.execute_reply":"2024-05-27T17:04:44.175918Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":"## Removing English Stopwords","metadata":{}},{"cell_type":"code","source":"import nltk\nfrom nltk.corpus import stopwords\n\n# Download the stopwords corpus\nnltk.download('stopwords')\n\n# Load the stopwords for English\nstop_words = set(stopwords.words('english'))\n\n# Apply stopwords removal to the 'review' column\ndf['review'] = df['review'].apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in stop_words]))\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:44.178391Z","iopub.execute_input":"2024-05-27T17:04:44.178891Z","iopub.status.idle":"2024-05-27T17:04:46.050027Z","shell.execute_reply.started":"2024-05-27T17:04:44.178827Z","shell.execute_reply":"2024-05-27T17:04:46.046931Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n","output_type":"stream"},{"name":"stderr","text":"\nKeyboardInterrupt\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Word Tokenization","metadata":{}},{"cell_type":"code","source":"# Tokenize the review column\nfrom nltk import word_tokenize\ndf['tokens'] = df['review'].apply(word_tokenize)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.051061Z","iopub.status.idle":"2024-05-27T17:04:46.051444Z","shell.execute_reply.started":"2024-05-27T17:04:46.051265Z","shell.execute_reply":"2024-05-27T17:04:46.051281Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# Function to plot word frequency as a word cloud\ndef plot_word_cloud(corpus, title):\n    # Join all reviews into a single string\n    text = ' '.join(corpus)\n    \n    # Generate word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n    \n    # Plot word cloud\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.title(title)\n    plt.axis('off')\n    plt.show()\n\n# Word cloud for positive reviews\nplot_word_cloud(df[df['sentiment'] == 'positive']['review'], 'Word Cloud for Positive Reviews')\n\n# Word cloud for negative reviews\nplot_word_cloud(df[df['sentiment'] == 'negative']['review'], 'Word Cloud for Negative Reviews')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.052783Z","iopub.status.idle":"2024-05-27T17:04:46.053165Z","shell.execute_reply.started":"2024-05-27T17:04:46.052989Z","shell.execute_reply":"2024-05-27T17:04:46.053004Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\n\n# Ignore all warnings\nwarnings.filterwarnings(\"ignore\")\n\n# \nX = df['review']\ny = df['encoded_sentiment']","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.054420Z","iopub.status.idle":"2024-05-27T17:04:46.054950Z","shell.execute_reply.started":"2024-05-27T17:04:46.054664Z","shell.execute_reply":"2024-05-27T17:04:46.054685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Train-test-split","metadata":{}},{"cell_type":"markdown","source":"In machine learning, it's essential to split the dataset into training and testing sets to evaluate the performance of the model. The `train_test_split` function from the `sklearn.model_selection` module helps us accomplish this task efficiently. I set the train_size to `50%`.","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=42, train_size=0.5)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.058421Z","iopub.status.idle":"2024-05-27T17:04:46.058775Z","shell.execute_reply.started":"2024-05-27T17:04:46.058598Z","shell.execute_reply":"2024-05-27T17:04:46.058613Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# B. Word Vector and Embedding Algorithms","metadata":{}},{"cell_type":"markdown","source":"\nText data is inherently unstructured, making it challenging for machine learning algorithms to process effectively. To overcome this challenge, we employ word vectorization and embedding techniques. \n\nBy converting text data into numerical representations, we enable machine learning models to understand and analyze textual information. This process, known as vectorization, transforms each word or sentence into a numeric vector, where each dimension of the vector represents a unique aspect or feature of the text.\n\nThese numerical representations capture semantic relationships between words, enabling models to learn complex patterns and relationships within the text. As a result, machine learning algorithms can perform tasks such as text classification, sentiment analysis, and information retrieval with greater accuracy and efficiency.\n\nIn this context, various algorithms play a crucial role in generating meaningful word embeddings and facilitating the processing of text data by machine learning models.\n\nIn this notebook I used the followig:\n\n1. **CountVectorizer**\n2. **Term frequency-Inverse Document Frequency**\n3. **Word2Vec**\n4. **GloVe**\n5. **Sentence Transformers**\n\n   a. **all-MiniLM-L6-v2**\n   \n   b. **bert-base-nli-mean-tokens**\n   \n   c. **roberta-large-nli-stsb-mean-tokens**","metadata":{}},{"cell_type":"markdown","source":"## 1. Count Vectorizer (Bag of words)","metadata":{}},{"cell_type":"markdown","source":"It converts a collection of text documents to a matrix of token counts. It is also known  `Bag Of Words(BOW),` but it loses the word index.\n","metadata":{"execution":{"iopub.status.busy":"2024-05-26T15:36:22.173892Z","iopub.execute_input":"2024-05-26T15:36:22.174878Z","iopub.status.idle":"2024-05-26T15:36:22.181198Z","shell.execute_reply.started":"2024-05-26T15:36:22.174841Z","shell.execute_reply":"2024-05-26T15:36:22.179933Z"}}},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer\n# Initialize the TfidfVectorizer\n\nvectorizer = CountVectorizer()\n\n# Fit and transform the training data\nX_train_vec = vectorizer.fit_transform(X_train)\n\n# Transform the validation data\nX_valid_vec = vectorizer.transform(X_valid)\n\n# Check the shapes of the transformed data\nprint(X_train_vec.shape)\nprint(X_valid_vec.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.059802Z","iopub.status.idle":"2024-05-27T17:04:46.060311Z","shell.execute_reply.started":"2024-05-27T17:04:46.060057Z","shell.execute_reply":"2024-05-27T17:04:46.060079Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Create CountVectorizer\nvectorizer = CountVectorizer()\n\n# Fit and transform the training data\nX_train_counts = vectorizer.fit_transform(X_train)\n\n# Get the feature names (words)\nwords = vectorizer.get_feature_names_out()\n\n# Summarize word counts\nword_counts = X_train_counts.sum(axis=0)\n\n# Sort words by frequency\nword_freq = [(word, word_counts[0, idx]) for word, idx in vectorizer.vocabulary_.items()]\nword_freq.sort(key=lambda x: x[1], reverse=True)\n\n# Plot the top N most frequent words\nN = 25  \ntop_words = [word[0] for word in word_freq[:N]]\ntop_freqs = [word[1] for word in word_freq[:N]]\n\nplt.figure(figsize=(20, 10))\nplt.bar(top_words, top_freqs)\nplt.xlabel('Words')\nplt.ylabel('Frequency')\nplt.title('Top 25 Most Frequent Words')\nplt.xticks(rotation=45)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.061945Z","iopub.status.idle":"2024-05-27T17:04:46.062294Z","shell.execute_reply.started":"2024-05-27T17:04:46.062128Z","shell.execute_reply":"2024-05-27T17:04:46.062143Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 2. Transverse Documnt - Inverse Document Frequency","metadata":{}},{"cell_type":"markdown","source":"`Tf` means `term-frequency` while `tf-idf` means `term-frequency times inverse document-frequency`. This is a common term weighting scheme in information retrieval, that has also found good use in document classification.\n\nThe goal of using tf-idf instead of the raw frequencies of occurrence of a token in a given document is to scale down the impact of tokens that occur very frequently in a given corpus and that are hence empirically less informative than features that occur in a small fraction of the training corpus.","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n# Initialize the TfidfVectorizer\nvec = TfidfVectorizer(\n    ngram_range=(1, 2),\n    min_df=3,\n    max_df=0.9,\n    strip_accents='unicode',\n    use_idf=1,\n    smooth_idf=1,\n    sublinear_tf=1,\n    binary=1,\n    stop_words='english'\n)\n\n# Fit and transform the training data\nX_train_tfidf = vec.fit_transform(X_train)\n\n# Transform the validation data\nX_valid_tfidf = vec.transform(X_valid)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.064092Z","iopub.status.idle":"2024-05-27T17:04:46.064449Z","shell.execute_reply.started":"2024-05-27T17:04:46.064278Z","shell.execute_reply":"2024-05-27T17:04:46.064293Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check the shapes of the transformed data\nprint(X_train_vec.shape)\nprint(X_valid_vec.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.065542Z","iopub.status.idle":"2024-05-27T17:04:46.065913Z","shell.execute_reply.started":"2024-05-27T17:04:46.065714Z","shell.execute_reply":"2024-05-27T17:04:46.065728Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3. Word2vec Algorithm","metadata":{}},{"cell_type":"markdown","source":"`Word2Vec` is a popular algorithm for generating word embeddings. It represents words as dense vectors in a continuous vector space and captures semantic similarities between words by mapping them to nearby points in the vector space, allowing for effective analysis of word relationships and contexts.\n\n**Skip-gram**: This model aims to predict the target word based on the context words surrounding it. It takes a window of context words as input and tries to predict the target word. \n**Continuous Bag of Words (BoW)**: The CBOW model predicts context words given a target word. It takes a target word as input and tries to predict the context words within a specific window around the target word. CBOW is generally faster to train and works well with frequent words. \n\nIn this specific dataset, the Skip-gram model consistently outperformed the Continuous Bag of Words (CBOW) model across various machine learning algorithms. This is why I chose to include only the Skip-gram model in my notebook, as it demonstrated superior performance in capturing the semantic similarities between words.\n","metadata":{}},{"cell_type":"code","source":"from gensim.models import Word2Vec\nfrom nltk.tokenize import word_tokenize\nfrom keras.preprocessing.sequence import pad_sequences\nimport numpy as np\n\n\n# Tokenize the flattened text into sentences\nsentences = [word_tokenize(review) for review in X_train]\n\n# Train the Skip-gram Model \nmodel = Word2Vec(sentences, min_count=1, vector_size=100, window=5, sg=1)\n\n# Define function to generate embeddings\ndef generate_embeddings(sentence, model):\n    embeddings = []\n    for word in sentence:\n        if word in model.wv.key_to_index:\n            embeddings.append(model.wv[word])\n    return embeddings\n\n\n# Apply model to generate embeddings for each sentence in the flattened text\nX_train_model = [generate_embeddings(sentence, model) for sentence in sentences]\n\n# Flatten the embeddings\n\nX_train_model_flat = [np.array(embeddings) for embeddings in X_train_model]\n\n# Define the maximum sequence length (number of features per row)\nmax_sequence_length = 100\n\n# Pad or truncate sequences to ensure fixed number of features per row\n\nX_train_model_padded = pad_sequences(X_train_model_flat, maxlen=max_sequence_length, dtype='float32', padding='post', truncating='post', value=0.0)\n\n# Ensure that you have 40000 outputs\nX_train_model_padded = X_train_model_padded[:40000]\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.066966Z","iopub.status.idle":"2024-05-27T17:04:46.067293Z","shell.execute_reply.started":"2024-05-27T17:04:46.067132Z","shell.execute_reply":"2024-05-27T17:04:46.067145Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Tokenize the flattened text into sentences for validation data\nsentences_valid = [word_tokenize(review) for review in X_valid]\n\n# Apply model to generate embeddings for each sentence in the flattened validation text\nX_valid_model = [generate_embeddings(sentence, model) for sentence in sentences_valid]\n\n# Flatten the embeddings for validation data\n\nX_valid_model_flat = [np.array(embeddings) for embeddings in X_valid_model]\n\n# Pad or truncate sequences for validation data\n\nX_valid_model_padded = pad_sequences(X_valid_model_flat, maxlen=max_sequence_length, dtype='float32', padding='post', truncating='post', value=0.0)\n\n\n# Reshape the input array to flatten it\n\nX_train_flattened = X_train_model_padded.reshape(X_train_model_padded.shape[0], -1)\n\n\nX_valid_flattened = X_valid_model_padded.reshape(X_valid_model_padded.shape[0], -1)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.068650Z","iopub.status.idle":"2024-05-27T17:04:46.069014Z","shell.execute_reply.started":"2024-05-27T17:04:46.068816Z","shell.execute_reply":"2024-05-27T17:04:46.068830Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X_train_flattened.shape)\n\n\nprint(X_valid_flattened.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.070437Z","iopub.status.idle":"2024-05-27T17:04:46.070809Z","shell.execute_reply.started":"2024-05-27T17:04:46.070613Z","shell.execute_reply":"2024-05-27T17:04:46.070628Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 4. GloVe Embeddings","metadata":{}},{"cell_type":"markdown","source":"I employed this `glove.6B.100d.txt` but the results were not promising. To save the memory of my notebook, I decided not to train this model on my dataset.","metadata":{}},{"cell_type":"markdown","source":"## 5. Sentence Transformers\n\n**I used several algorithms from sentence transformers to generate embeddings. The embeddings were saved in a sepaarte dataset, from which I am using them for further annalysis. The algorithms are:**\n","metadata":{"execution":{"iopub.status.busy":"2024-05-26T16:13:35.846228Z","iopub.execute_input":"2024-05-26T16:13:35.846724Z","iopub.status.idle":"2024-05-26T16:13:35.855287Z","shell.execute_reply.started":"2024-05-26T16:13:35.846686Z","shell.execute_reply":"2024-05-26T16:13:35.853645Z"}}},{"cell_type":"markdown","source":"### a. all-MiniLM-L6-v2\nIt is an all-around model tuned for many use cases and was trained on a large and diverse dataset of over 1 billion training pairs with six transformer layers. It is faster and still provides good-quality results. It takes a max_sequence_length of 256 and yeilds embeddings of 384-dimensions.\nI have added the trained embeddings in this notebook to minimize memory usage","metadata":{}},{"cell_type":"markdown","source":"### b. bert-base-nli-mean-tokens¶\n\nThis transformer model is based on BERT and is trained to generate sentence embeddings by averaging the embeddings of all tokens in the input sentence. It is commonly used for sentence similarity, semantic search, and text classification tasks.","metadata":{}},{"cell_type":"markdown","source":"#### c. multi-qa-mpnet-base-dot-v1\n\nThis model is widely used for semantic search. Given a query/question, it finds relevant passages. It was trained on a large, diverse set of (question-answer) pairs, leveraging the MPNet architecture to capture nuanced semantic information across various contexts. It takes a maximum input of 512 sequence lengths, and sand produces word embeddings of 768 dimensions.","metadata":{}},{"cell_type":"markdown","source":"### d. roberta-large-nli-stsb-mean-tokens\n\nroberta-large-nli-stsb-mean-tokens is a robust sentence transformer model based on the RoBERTa architecture, fine-tuned on Natural Language Inference (NLI) and the Semantic Textual Similarity Benchmark (STSB). This model produces highly accurate sentence embeddings using mean pooling of token embeddings.","metadata":{}},{"cell_type":"code","source":"# Load embeddings into variables\nimdb_miniLM_embeddings_1 = np.load('/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_1_embeddings(MiniLM).npy')\nimdb_miniLM_embeddings_2 = np.load('/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_2_embeddings (MiniLM).npy')\nimdb_multi_qa_embeddings_1 = np.load('/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_1_embeddings_multi-qa-mpnet-base-dot-v1.npy')\nimdb_multi_qa_embeddings_2 = np.load('/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_2_embeddings_multi-qa-mpnet-base-dot-v1.npy')\nimdb_roberta_large_embeddings_1 = np.load('/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_1_embeddings_roberta_large.npy')\nimdb_roberta_large_embeddings_2 = np.load('/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_2_embeddings_roberta_large.npy')\nimdb_bert_base_embeddings_1 = np.load('/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_1_embeddings(Bert-Base).npy')\nimdb_bert_base_embeddings_2 = np.load('/kaggle/input/imdb-dataset-embeddings-by-sentence-transformers/imdb_dataset_df_2_embeddings(Bert-base).npy')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.072337Z","iopub.status.idle":"2024-05-27T17:04:46.072682Z","shell.execute_reply.started":"2024-05-27T17:04:46.072504Z","shell.execute_reply":"2024-05-27T17:04:46.072527Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# C. Models Comaprison","metadata":{}},{"cell_type":"markdown","source":"**In this notebook, I used several machine learning algorithms. Here is a list:**\n\n**1. Logistic Regression**\n\n**2. XGBClassifier**\n\n**3. Multilayer Perceptron (MLP)**\n\n**4. Recurrent Neural Network with Long Short-Term Memory (LSTM)**","metadata":{}},{"cell_type":"markdown","source":"## **Logistic Regression**","metadata":{}},{"cell_type":"markdown","source":"I employed logistic regression with all the above word embeddings, which were generated using different vectors and word embedding algorithms. Surprisingly, the results were outstanding when I used TF-IDF word vectors, achieving an accuracy of `90%`. In contrast, the skip-gram word2 vec model yielded an accuracy of `73%`, and the CBOW model achieved `69%`. The sentence transformer embeddings performed very poorly with the logistic regression model, with an accuracy of just 50%\n","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\ndef train_and_eval_logreg(X_train, y_train, X_valid, y_valid):\n    #Initialize the logistic Regression Model\n    model = LogisticRegression(C=1.0, penalty='l2', solver='liblinear', max_iter=1000, random_state=42)\n        \n    #Train the model\n    clf = model.fit(X_train, y_train)\n    \n    # Make predictions\n    predictions = clf.predict(X_valid)\n     \n    # Calculate the accuracy_score\n    accuracy = accuracy_score(y_valid, predictions)\n    \n    # Print the accuracy\n    print(f\"Accuracy Score: {accuracy * 100:.2f}%\")\n    \n    return accuracy\n\n# Define the dataset names and corresponding data\n# Define the dataset names and corresponding data\ndataset_names = [\n    \"CountVectorizer\",\n    \"TF-IDF\",\n    \"Skip-gram\"  # Corrected the typo here\n]\n\ndatasets = [\n(X_train_vec, y_train, X_valid_vec, y_valid), # Countvectorizer\n(X_train_tfidf, y_train, X_valid_tfidf, y_valid),  # TF-IDF vectors\n(X_train_flattened, y_train, X_valid_flattened, y_valid),  # Skip-gram vectors\n]\n# Apply logistic regression to all the datsets\n\nlogreg_accuracies = {}\nfor name, (X_train, y_train, X_valid, y_valid) in zip (dataset_names, datasets):\n    print(f\"Evaluating dataset with Logistic Regression: {name}\")\n    accuracy = train_and_eval_logreg(X_train, y_train, X_valid, y_valid)\n    logreg_accuracies[name] = accuracy\n    \n# Print all accuracies\nprint(\"\\nSummary of Logistic Regression accuracies:\")\nfor name, accuracy in logreg_accuracies.items():\n    print(f\"{name}: {accuracy * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.073540Z","iopub.status.idle":"2024-05-27T17:04:46.073923Z","shell.execute_reply.started":"2024-05-27T17:04:46.073725Z","shell.execute_reply":"2024-05-27T17:04:46.073740Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Logistic Regression Performance Comparison with Different Word Vectors and Embeddings","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Define the models and their accuracies\nmodels = list(logreg_accuracies.keys())\naccuracies = [accuracy * 100 for accuracy in logreg_accuracies.values()]  # Format accuracies as percentages\n\n\n# Create bar plot\nplt.figure(figsize=(10, 6))\nbars = plt.bar(models, accuracies, color='skyblue')\n\n# Add percentage labels above each bar\nfor bar, accuracy in zip(bars, accuracies):\n    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 1, f'{accuracy:.2f}%', ha='center', va='bottom')\n\nplt.xlabel('Model')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuarcy of Model with Diffrent Embeddings and Word Vectors')\nplt.ylim(0, 100)  # Limit y-axis from 0 to 100\nplt.xticks(rotation=45)  # Rotate x-axis labels for better visibility\nplt.grid(axis='y', linestyle='--', alpha=0.7)  # Add horizontal gridlines\nplt.tight_layout()  # Adjust layout to prevent clipping labels\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.075217Z","iopub.status.idle":"2024-05-27T17:04:46.075536Z","shell.execute_reply.started":"2024-05-27T17:04:46.075377Z","shell.execute_reply":"2024-05-27T17:04:46.075391Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **XGBClassifier**","metadata":{}},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.metrics import accuracy_score\n\ndef train_and_eval_xgb(X_train, y_train, X_valid, y_valid):\n    # Initialize the XGBClassifier model\n    model = xgb.XGBClassifier()\n    \n    # Train the model\n    clf = model.fit(X_train, y_train)\n    \n    # Make predictions\n    predictions = clf.predict(X_valid)\n    \n    # Calculate the accuracy_score\n    accuracy = accuracy_score(y_valid, predictions)\n    \n    # Print the accuracy\n    print(f\"Accuracy Score: {accuracy * 100:.2f}%\")\n    \n    return accuracy\n\n# Define the dataset names and corresponding data\ndataset_names = [\n    \"CountVectorizer\",\n    \"TF-IDF\",\n    \"Skip-gram\",\n]\ndatasets = [\n    (X_train_vec, y_train, X_valid_vec, y_valid),  # CountVectorizer\n    (X_train_tfidf, y_train, X_valid_tfidf, y_valid),  # TF-IDF vectors\n    (X_train_flattened, y_train, X_valid_flattened, y_valid),  # Skip-gram vectors\n]\n\n# Apply XGBClassifier to all the datasets\nxgb_accuracies = {}\nfor name, (X_train, y_train, X_valid, y_valid) in zip(dataset_names, datasets):\n    print(f\"Evaluating dataset with XGBClassifier: {name}\")\n    accuracy = train_and_eval_xgb(X_train, y_train, X_valid, y_valid)\n    xgb_accuracies[name] = accuracy\n    \n# Print all accuracies\nprint(\"\\nSummary of XGBClassifier accuracies:\")\nfor name, accuracy in xgb_accuracies.items():\n    print(f\"{name}: {accuracy * 100:.2f}%\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.076539Z","iopub.status.idle":"2024-05-27T17:04:46.076891Z","shell.execute_reply.started":"2024-05-27T17:04:46.076705Z","shell.execute_reply":"2024-05-27T17:04:46.076719Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### XGBClassifier Performance Comparison with Different Word Vectors and Embeddings","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Define the models and their accuracies\nmodels = list(xgb_accuracies.keys())\naccuracies = [accuracy * 100 for accuracy in xgb_accuracies.values()]  # Format accuracies as percentages\n\n\n# Create bar plot\nplt.figure(figsize=(10, 6))\nbars = plt.bar(models, accuracies, color='skyblue')\n\n# Add percentage labels above each bar\nfor bar, accuracy in zip(bars, accuracies):\n    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 1, f'{accuracy:.2f}%', ha='center', va='bottom')\n\nplt.xlabel('XGBClassifier Model')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuarcy of Model with Diffrent Embeddings and Word Vectors')\nplt.ylim(0, 100)  # Limit y-axis from 0 to 100\nplt.xticks(rotation=45)  # Rotate x-axis labels for better visibility\nplt.grid(axis='y', linestyle='--', alpha=0.7)  # Add horizontal gridlines\nplt.tight_layout()  # Adjust layout to prevent clipping labels\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.078200Z","iopub.status.idle":"2024-05-27T17:04:46.078547Z","shell.execute_reply.started":"2024-05-27T17:04:46.078375Z","shell.execute_reply":"2024-05-27T17:04:46.078390Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **MLPClassifier**","metadata":{}},{"cell_type":"code","source":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import accuracy_score\n\ndef train_and_eval_mlp(X_train, y_train, X_valid, y_valid):\n\n    # Define the MLPClassifier model with early stopping\n    model = MLPClassifier(hidden_layer_sizes=100, max_iter=100, random_state=42, early_stopping=True, validation_fraction=0.1, learning_rate_init=0.001)\n    # Train the model\n    clf = model.fit(X_train, y_train)\n    \n    # Make predictions\n    predictions = clf.predict(X_valid)\n    \n    # Calculate the accuracy_score\n    accuracy = accuracy_score(y_valid, predictions)\n    \n    # Print the accuracy\n    print(f\"Accuracy Score: {accuracy * 100:.2f}%\")\n    \n    return accuracy\n\n# Define the dataset names and corresponding data\ndataset_names = [\n    \"CountVectorizer\",\n    \"TF-IDF\",\n    \"Skip-gram\",\n    \"Sentence Transformer\"\n]\ndatasets = [\n    (X_train_vec, y_train, X_valid_vec, y_valid),  # CountVectorizer\n    (X_train_tfidf, y_train, X_valid_tfidf, y_valid),  # TF-IDF vectors\n    (X_train_flattened, y_train, X_valid_flattened, y_valid), # Skip-gram vectors\n    (sent_trans_train_multi_qa, y_train, sent_trans_valid_multi_qa, y_valid) # sentence Transformer\n]\n\n# Apply MLPClassifier to all the datasets\nmlp_accuracies = {}\nfor name, (X_train, y_train, X_valid, y_valid) in zip(dataset_names, datasets):\n    print(f\"Evaluating dataset with MLPClassifier: {name}\")\n    accuracy = train_and_eval_mlp(X_train, y_train, X_valid, y_valid)\n    mlp_accuracies[name] = accuracy\n    \n# Print all accuracies\nprint(\"\\nSummary of MLPClassifier accuracies:\")\nfor name, accuracy in mlp_accuracies.items():\n    print(f\"{name}: {accuracy * 100:.2f}%\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.080172Z","iopub.status.idle":"2024-05-27T17:04:46.080506Z","shell.execute_reply.started":"2024-05-27T17:04:46.080343Z","shell.execute_reply":"2024-05-27T17:04:46.080357Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### MLPClassifier Performance Comparison with Different Word Vectors and Embeddings","metadata":{}},{"cell_type":"code","source":"models = list(mlp_accuracies.keys())\naccuracies = [accuracy * 100 for accuracy in mlp_accuracies.values()]  # Format accuracies as percentages\n\n# Create bar plot\nplt.figure(figsize=(10, 6))\nbars = plt.bar(models, accuracies, color='skyblue')\n\n# Add percentage labels above each bar plot\nfor bar, accuracy in zip(bars, accuracies):\n     plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 1, f'{accuracy:.2f}%', ha='center', va='bottom')\n\nplt.xlabel('MLPClassifier Model')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy of Models with Different Embeddings and Word Vectors')\nplt.ylim(0, 100)  # Limit y-axis from 0 to 100\nplt.xticks(rotation=45)  # Rotate x-axis labels for better visibility\nplt.grid(axis='y', linestyle='--', alpha=0.7)  # Add horizontal gridlines\nplt.tight_layout()  # Adjust layout to prevent clipping labels\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.081514Z","iopub.status.idle":"2024-05-27T17:04:46.081843Z","shell.execute_reply.started":"2024-05-27T17:04:46.081682Z","shell.execute_reply":"2024-05-27T17:04:46.081696Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **Recurrent Neural Network(RNN) with Long-Short Term Memory(LSTM)**","metadata":{}},{"cell_type":"markdown","source":"I trained a Recurrent Neural Network (RNN) using various word embeddings generated by different Sentence Transformer algorithms. Remarkably, I achieved an outstanding accuracy of `89%` when utilizing the `multi-qa-mpnet-base-dot-v1` algorithm with an LSTM layer consisting of 64 units. Additionally, the performance of other Sentence Transformers was impressive, yielding an accuracy of `83%` with `All-MiniLM-L6-v2`, `83%` with `BERT-Base-`, and `84%` with `RoBERTa-Large`.","metadata":{}},{"cell_type":"code","source":"# Divide the y labels into two \nrows = len(y)\nsplit_index = rows // 2\ny_train_mini_multiqa = y.iloc[:split_index]\ny_valid_mini_multiqa = y.iloc[split_index:]","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.083129Z","iopub.status.idle":"2024-05-27T17:04:46.083448Z","shell.execute_reply.started":"2024-05-27T17:04:46.083291Z","shell.execute_reply":"2024-05-27T17:04:46.083304Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Split the y lables into 20 and 80%\nrows = len(y)\nsplit_index = int(rows * 0.8)\ny_train_roberta_bert = y.iloc[:split_index]\ny_valid_roberta_bert = y.iloc[split_index:]","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.088941Z","iopub.status.idle":"2024-05-27T17:04:46.089324Z","shell.execute_reply.started":"2024-05-27T17:04:46.089145Z","shell.execute_reply":"2024-05-27T17:04:46.089161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## RNN with LSTM Performance Comparison with Different Word Vectors and Embeddings","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom sklearn.metrics import accuracy_score\n# Load the saved model\nmodel = tf.keras.models.load_model('/kaggle/input/models/model_miniLM.h5')\n\n# Now you can use the model to make predictions\npredictions = model.predict(imdb_miniLM_embeddings_2)  # Replace 'X_test' with your test data\n\n# Define the threshold\nthreshold = 0.5\n\n# Convert probabilities to binary predictions\nbinary_pred = (predictions > threshold).astype(int)\n\n# Calculate the accuracy score\naccuracy1 = accuracy_score(y_valid_mini_multiqa, binary_pred)\n\n# Print the accuracy and binary predictions\nprint(f\"Accuracy Score: {accuracy1 * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.091018Z","iopub.status.idle":"2024-05-27T17:04:46.091354Z","shell.execute_reply.started":"2024-05-27T17:04:46.091192Z","shell.execute_reply":"2024-05-27T17:04:46.091207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\n\n# Load the saved model\nmodel = tf.keras.models.load_model('/kaggle/input/models/multi-qa-mpnet-base-dot-v1.h5')\n\n# Now you can use the model to make predictions\npredictions = model.predict(imdb_multi_qa_embeddings_2)  \n\n# Define the threshold\nthreshold = 0.5\n\n# Convert probabilities to binary predictions\nbinary_pred = (predictions > threshold).astype(int)\n\n# Calculate the accuracy score\naccuracy2 = accuracy_score(y_valid_mini_multiqa, binary_pred)\n\n# Print the accuracy and binary predictions\nprint(f\"Accuracy Score: {accuracy2 * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.093232Z","iopub.status.idle":"2024-05-27T17:04:46.093601Z","shell.execute_reply.started":"2024-05-27T17:04:46.093427Z","shell.execute_reply":"2024-05-27T17:04:46.093442Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\n\n# Load the saved model\nmodel = tf.keras.models.load_model('/kaggle/input/models/bert_base_nli_mean_tokens.h5')\n\n# Now you can use the model to make predictions\npredictions = model.predict(imdb_bert_base_embeddings_2)  \n\n# Define the threshold\nthreshold = 0.5\n\n# Convert probabilities to binary predictions\nbinary_pred = (predictions > threshold).astype(int)\n\n# Calculate the accuracy score\naccuracy3 = accuracy_score(y_valid_roberta_bert, binary_pred)\n\n# Print the accuracy and binary predictions\nprint(f\"Accuracy Score: {accuracy3 * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.095006Z","iopub.status.idle":"2024-05-27T17:04:46.095337Z","shell.execute_reply.started":"2024-05-27T17:04:46.095178Z","shell.execute_reply":"2024-05-27T17:04:46.095192Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\n\n# Load the saved model\nmodel = tf.keras.models.load_model('/kaggle/input/models/roberta-large-nli-stsb-mean-tokens.h5')\n\n# Now you can use the model to make predictions\npredictions = model.predict(imdb_roberta_large_embeddings_2)  \n\n# Define the threshold\nthreshold = 0.5\n\n# Convert probabilities to binary predictions\nbinary_pred = (predictions > threshold).astype(int)\n\n# Calculate the accuracy score\naccuracy4 = accuracy_score(y_valid_roberta_bert, binary_pred)\n\n# Print the accuracy and binary predictions\nprint(f\"Accuracy Score: {accuracy4 * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:04:46.096534Z","iopub.status.idle":"2024-05-27T17:04:46.096957Z","shell.execute_reply.started":"2024-05-27T17:04:46.096748Z","shell.execute_reply":"2024-05-27T17:04:46.096764Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Accuracies for different models or datasets\naccuracies = [accuracy1, accuracy2, accuracy3, accuracy4]\nlabels = ['MiniML Model', 'Multiqa-mpnet Model', 'Bert-Base Model', 'Roberta-large Model']\n\n# Convert accuracies to percentages\naccuracies_percentage = [accuracy * 100 for accuracy in accuracies]\n\n# Create a bar plot\nplt.figure(figsize=(10, 6))\nbars = plt.bar(labels, accuracies_percentage, color='skyblue')\n\n# Add percentage labels above each bar\nfor bar, accuracy in zip(bars, accuracies_percentage):\n    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 1, f'{accuracy:.2f}%', ha='center', va='bottom')\n\n# Labeling the graph\nplt.xlabel('Model')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy of Different Models')\nplt.ylim(0, 100)  # Limit y-axis from 0 to 100\nplt.xticks(rotation=45)  # Rotate x-axis labels for better visibility\nplt.grid(axis='y', linestyle='--', alpha=0.7)  # Add horizontal gridlines\nplt.tight_layout()  # Adjust layout to prevent clipping labels\n\n# Display the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-27T17:06:19.556593Z","iopub.execute_input":"2024-05-27T17:06:19.557105Z","iopub.status.idle":"2024-05-27T17:06:19.859164Z","shell.execute_reply.started":"2024-05-27T17:06:19.557074Z","shell.execute_reply":"2024-05-27T17:06:19.858084Z"},"trusted":true},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Conclusion\n\n**So, after extensive experimentation with different word vectorization and embedding algorithms and then their training on several kinds of machine learning algorithms, I \nfound the three sets of combinations best for the sentiment analysis on my dataset:**\n\n**1. TF_IDF with Logistic Regression**\n\n**2. TF-IDF with MLPClassifier**\n\n**3. Sentence Transformer Model (multi-qa-mpnet-base-dot-v1) with RNN**","metadata":{}}]}